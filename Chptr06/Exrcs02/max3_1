#!/bin/sh
#: Title       : Max3_1
#: Date        : 2016-05-17
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.1.0
#: Description : Executable Dash shell script
#:             : Sort three integers and write results in variables
#: Options     : N/A
##
## -- Functions ----------------------------------------------------------------
stdmsg() { #@ DESCRIPTION: Print messages to STDOUT
           #@ USAGE: stdmsg [ MSG ... ]
    [ "${1+X}" = X ] && printf "%s\n" "$@"
}
errmsg() { #@ DESCRIPTION: Print messages to STDERR prefixed by an error stamp
           #@ USAGE: stderr [ MSG ... ]
    stdmsg ${1+"Error! $@"} >&2
}
vnme() { #@ DESCRIPTION: Tests if $1 string is a valid variable shell name.
         #@ USAGE: vname [ STRING ]
    case $1 in                       ## Return > 0 when provided string:
        "") return 1 ;;              ## * Is the null string;
        [!a-zA-Z_]*) return 2 ;;     ## * Begins w/other than letter or '_';
        *[!a-zA-Z0-9_]*) return 3 ;; ## * Contains other than letter/number/_.
    esac
}
setvar() { #@ DESCRIPTION: Sets $1 variable specified by reference, to $2 value.
           #@ $1 MUST BE A VALID NAME!
           #@ USAGE: setvar NAME [ VALUE ]
           #@        /!\ - WARNING! - /!\ $1 must be a valid name
    eval "$1=\${2+\"\$2\"}" ## Without the right side backslash, escaped chars
                            ## won't be part of assignment
}
getvar() { #@ DESCRIPTION: Stores value of $2 referenced var in $1 name. If $2
           #@              referenced var. is unset, so $1 name will remain and
           #@              exit status will be 1.
           #@ USAGE: getvar NAMEW NAMER
           #@        /!\ - WARNING! - /!\ $1 AND $2 must be a valid names
    eval "[ \"\${$2+X}\" = X ] && $1=\"\${$2}\"" ## Do not set $1 referenced
                                                 ## name if $2 is also unset
}
isodec() { #@ DESCRIPTION: Tests if $1 matches a ISO C std decimal constant, as
           #@              defined in Sec 6.4.4.1. Needed for safe feeding of
           #@              decimal strings to shell's arithmetic expansion.
           #@ USAGE: isodec [ STRING ]
    case $1 in
        "" | [!1-9]* | *[!0-9]*) return 1 ;; ## Require one nonzero-digit
    esac                                     ## followed by dec-constant digit
}
isooct() { #@ DESCRIPTION: Tests if $1 matches an ISO C std octal constant, as
           #@              defined in Sec 6.4.4.1. Needed for safe feeding of
           #@              octal strings to shell's arithmetic expansion.
           #@ USAGE: isooct [ STRING ]
    case $1 in
        "" | [!0]* | *[!0-7]*) return 1 ;; ## Require a leading zero followed by
    esac                                   ## oct-constant oct-digit
}
isohex() { #@ DESCRIPTION: Tests if $1 matches an ISO C std hex constant, as
           #@              defined in Sec 6.4.4.1. Needed for safe feeding of
           #@              hexadecimal strings to shell's arithmetic expansion.
           #@ USAGE: isohex [ STRING ]
    case $1 in
        [0][Xx]*) case ${1#0[Xx]} in              ## Start by extracting
                      *[!0-9A-Fa-f]*) return 1 ;; ## hex-prefix and then require
                  esac ;;                         ## a hex-constant hex-digit
        *) return 1 ;;
    esac
}
aevint() { #@ DESCRIPTION: Test if $1 matches an ISO C standard integer as
           #@              required by the Posix shell arithmetic expansion.
           #@ USAGE: aevint [ STRING ]
    # Start by removing any leading +/- chars from $1
    set -- "${1#"${1%%[!-+]*}"}" ## 1. keep +/- only chars by removing any other
                                 ##    char from $2 back;
                                 ## 2. Remove kept signs from $2 front.
    # Validate if valid if valid isodec, hex or oct
    isodec "$1" || isohex "$1" || isooct "$1"
}
usage() { #@ DESCRIPTION: Displays ussage message for current program
          #@ USAGE: usage 
    printf "USAGE: %s '[ NAME ]' [ NUM1 [ NUM2 [ NUM3 ] ] ] \n" "${0##*/}"
}
sort3() { #@ DESCRIPTION: Sorts three integers using shell's arithmetic exp. and
          #@              store in $1 referenced array elements.
          #@ USAnGE: sort3 ARRAYNAME INT1 INT2 INT3
    if ! vnme "$1"; then
        errmsg "Invalid name: \'$1\'"
        return 1
    fi
    [ $(($2 > $3)) -eq 1 ] && set -- $1 $3 $2 $4
    [ $(($3 > $4)) -eq 1 ] && set -- $1 $2 $4 $3
    [ $(($2 > $3)) -eq 1 ] && set -- $1 $3 $2 $4
    setvar $1_0 $2; setvar $1_1 $3; setvar $1_2 $4
}
dsplySrtd() { #@DESCRIPTION: Displays 3 already sorted integers
              #@USAGE:
    local digits format
    digits=5 format="%5s: %${digits}s\n"
    printf "$format" Min $1 Mid $2 Max $3
}
##
## -- Main ---------------------------------------------------------------------
main() { #@ DESCRIPTION: Wrapper for sort3()
         #@ USAGE: main [ -h | [ NUM1 [ NUM2 [ NUM3 ] ] ] ]
    # Local variables ("local" must be function's first statement)
    local min mid max
    case $1 in
        "")                 # Check for null or empty arg.
            errmsg "An arg is required"
            return 1 ;;
        -*) case ${1#-} in  # Is this an option argument?
                -)          # Is this teh last "--" option?
                    shift                 ## Shift args leftwise one place
                    if [ $# -gt 3 ]; then ## Require 1 but allow at most 3 args
                        errmsg "Too many arguments"
                        return 1
                    fi
                    case $1 in            ## Now check for a non-option arg
                        "")               ## One must be present
                            errmsg "An argumetn is required"
                            return 1 ;;
                        *)                
                            if [ $# -ne 3 ]; then ## Now test for other 3 args
                                errmsg "Please give me 3 integers to sort"
                                return 1
                            fi                    ## They must be valid integers
                            if ! { aevint "$1" && aevint "$2" &&
                                   aevint "$3"; }; then
                                errmsg "Invalid integer detected"
                                return 1
                            fi                    ## Now it is safe to sort
                            printf "Sorting entered numbers.."
                            sleep 1
                            sort3 sorted "$1" "$2" "$3"
                            getvar min sorted_0
                            getvar mid sorted_1
                            getvar max sorted_2   ## Display results
                            printf "OK\nSort results:\n"
                            dsplySrtd $min $mid $max
                        ;;
                    esac ;;
                h) usage ;; # Is this the help option?
                *)          # Unsupported option?
                    errmsg "Invalid option"
                    return 1 ;;
            esac ;;
        *)                  # Arguments without options?
            if [ $# -gt 3 ]; then         
                errmsg "Too many arguments"
                return 1
            fi
            main -- "$1" ${2+"$2"} ${3+"$3"}
        ;;
    esac
}
##
## -- Run! ---------------------------------------------------------------------
main ${1+"$@"} ## Call the main funciton
##
