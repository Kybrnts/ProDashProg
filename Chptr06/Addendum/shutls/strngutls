#: Title       : Strngutls
#: Date        : 2016-05-17
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.0.0
#: Description : Dash function declarations file
#:             : Adds usefull string test and manipulation tools
#: Options     : N/A
##
## Includes
. /usr/lib/shutls1.0/core/nmeutls || exit 1   ## Utilities for shell names
##
## Declarations
if [ "X$_INC_STRNGUTLS" = X ]; then ## Do not include if already included
readonly _INC_STRNGUTLS=:           ## Already sourced (included) test flag
# Declare the following useful symbols
readonly _NUL=    ## The null string (contains only the NUL char)
readonly _SP=" "  ## Space character
readonly _HT="	" ## Horizontal tab
readonly _LF="
"                 ## End of line (line feed)
##
## Function declarations -------------------------------------------------------
iswrd() { #@ DESCRIPTION: Tests if $1 string is a word (i.e. doesn't contain
          #@              any $IFS chars.
          #@ USAGE: iswrd '[ STRING ]'
    case $1 in                  ## Test if $1 string contains one of $IFS chars
        *["$IFS"]*) return 1 ;; ## If it does, return 1
    esac
}
isnul() { #@ DESCRIPTION: Tests if $1 contains a null string (i.e. just \0 char)
          #@ USAGE: isnul [ STRING ]
    [ X"$1" = X ] ## Fails when $1 is concatenation neutral
}
sbstr() { #@ DESCRIPTION: Tests if $1 string is a substring of $2
          #@ USAGE: sbstr [ STR1 [ STR2 ] ]
    case $2 in              ## Does $1 string matches
        *"$1"*) return 0 ;; ## Second, preceeded or followed by more chars (*)?
    esac                    ## Prevent expansion of * or ? by quoting $1
    return 1                ## return success status, otherwise ret error stat
}
nmrc() { #@ DESCRIPTION: Tests if $1 string contains only numeric characters.
         #@ USAGE: nmrc [ STRING ]
        case $1 in ## Test fails when $1 contains at least one non-numeric
            *[!0-9]*) return 1 ;;
        esac
}
alph() { #@ DESCRIPTION: Tests if $1 string contains only alphabetic chars.
         #@ USAGE: alph [ STRING ]
    case $1 in ## Test fails when $1 contains at least one non-alphabetic
        *[!A-Za-z]*) return 1 ;;
    esac
}
alnm()  { #@ DESCRIPTION: Tests if $1 string is alphanumeric.
          #@ USAGE: alnm [ STRING ]
    case $1 in ## Test fails when $1 contains one non-numeric or non-alphabetic
        *[!A-Za-z0-9]*) return 1 ;;
    esac
}
sapnd() { #@ DESCRIPTION:
          #@ USAGE: sapnd NAME NAME [ STRING [ SEPARATOR ] ]
    eval "setvar $1 \${$1+\"\${$1}\${3}\"}\"\$2\""
}
_wqargs() { #@ DESCRIPTION: Weak-quotes all but the last argument, appending
            #@              them in order in last argument referenced name.
            #@ USAGE: _wqpprs [ ARG1 [ ARG2 .. ] ] NAME
            #@        /!\ - WARNINGS: - /!\
            #@        * Last arg. must be a valid name
            #@        * DO NOT CALL DIRECTLY, use below wrapper instead.
    # Local variables ("local" must be function's first statement)
    local qtd ## Last quoted args string temporary storage
    while [ $# -gt 1 ]; do       ## While this is not the last arg..
        eval "getvar qtd \${$#}" ## Save last arg. referenced string
        ## Rewrite last arg. ref. string w/temp. +space +quoted current arg.
        eval "setvar \${$#} \${qtd:+\"\$qtd \"}\\\"\"\$1\"\\\""
        shift                  ## Remove current arg from list
    done
}
wqargs() { #@ DESCRIPTION: Weak-quotes all but 1st arg., storing them in order
           #@              in the 1st arg. referenced name using _wqargs().
           #@              Useful for building cmds in variables during runtime.
           #@ USAGE: NAME [ ARG1 [ ARG2 .. ] ]
           #@        /!\ - WARNING! - /!\ $1 must be a valid name
    # Local variables ("local" must be function's first statement)
    local _$1            ## Prefix name to safely pass it to wrapped function
    eval "getvar _$1 $1" ## Store previous content of $1 referenced name
    set -- "$@" _$1      ## Append name at the end as rquired by wrapped
    shift                ## Now safely remove first arg
    _wqargs "$@"         ## Issue wrapped function passing all args and name
    eval "getvar \${$##_} \${$#}" ## $1 is no longer initial name after shift,
                                  ## so access _$1 w/var. exp. before assigning.
}
_sqargs() { #@ DESCRIPTION: Strong-quotes all but the last argument, appending
            #@              them in order in last argument referenced name.
            #@ USAGE: _wqpprs [ ARG1 [ ARG2 .. ] ] NAME
            #@        /!\ - WARNINGS: - /!\
            #@        * Last arg. must be a valid name
            #@        * DO NOT CALL DIRECTLY, use below wrapper instead.
    # Local variables ("local" must be function's first statement)
    local qtd ## Last quoted args string temporary storage
    while [ $# -gt 1 ]; do       ## While this is not the last arg..
        eval "getvar qtd \${$#}" ## Save last arg. referenced string
        ## Rewrite last arg. ref. string w/temp. +space +quoted current arg.
        eval "setvar \${$#} \${qtd:+\"\$qtd \"}\\'\"\$1\"\\'"
        shift                  ## Remove current arg from list
    done
}
sqargs() { #@ DESCRIPTION: Strong-quotes all but 1st arg., storing them in order
           #@              in the 1st arg. referenced name using _wqargs().
           #@              Useful for building cmds in variables during runtime.
           #@ USAGE: NAME [ ARG1 [ ARG2 .. ] ]
           #@        /!\ - WARNING! - /!\ $1 must be a valid name
    # Local variables ("local" must be function's first statement)
    local _$1            ## Prefix name to safely pass it to wrapped function
    eval "getvar _$1 $1" ## Store previous content of $1 referenced name
    set -- "$@" _$1      ## Append name at the end as rquired by wrapped
    shift                ## Now safely remove first arg
    _sqargs "$@"         ## Issue wrapped function passing all args and name
    eval "getvar \${$##_} \${$#}" ## $1 is no longer initial name after shift,
                                  ## so access _$1 w/var. exp. before assigning.
}
ltrim() { #@ DESCRIPTION:
          #@ USAGE: ltrim STRING [ TOTRIM ]
    setvar $1 "${2#"${2%%[!"${3:-$IFS}"]*}"}"
}
rtrim() { #@ DESCRIPTION:
          #@ USAGE: rtrim STRING [ TOTRIM ]
    setvar $1 "${2%"${2##*[!"${3:-$IFS}"]}"}"
}
_getNxtFld() { #@ DESCRIPTION:
               #@ USAGE: _getNxtFld NAME FLDSSTRNG [ SPRTR ]
    # Local variables ("local" must be function's first statement)
    local flds fld
    getvar flds $2               ## Get $2 fields list into local
    ltrim flds "$flds" "$3"      ## Remove $3 from beginning of list
    isnul "$flds" && return 1    ## If no fields left, exit w/error
    fld=${flds%%["${3:-$IFS}"]*} ## Rm al $3 chars from right to extract field
    setvar $1 "$fld"             ## Write extracted field $1 ref. name
    ltrim flds "$flds" "$fld"    ## Remove extracted field from list
    setvar $2 "$flds"            ## Re-write field list w/out extacted field
}
getNxtFld() { #@ DESCRIPTION:
              #@ USAGE:
    # Local variables ("local" must be function's first statement)
    local _$1
    _getNxtFld _$1 $2 ${3+"$3"} || return $?
    getvar $1 _$1
}
fi
