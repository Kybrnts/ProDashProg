#!/bin/sh
#: Title       : Max3_1
#: Date        : 2016-05-17
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.0.0
#: Description : Dash function declarations file
#:             : Adds usefull shell tools to handle names and variables
#: Options     : N/A
##
## Declarations
if [ "X$_DEF_NMEUTILS" = X ]; then ## Do not include if already included
    readonly _DEF_NMEUTILS=:       ## Already included test flag
##
## Function declarations -------------------------------------------------------------------------------------------
vnme() { #@ DESCRIPTION: Tests if $1 string is a valid variable shell name.
         #@ USAGE: vname [ NAME ]
    case $1 in                       ## Return > 0 when provided string:
        "") return 1 ;;              ## * Is the null string;
        [!a-zA-Z_]*) return 2 ;;     ## * Begins w/other than letter or '_';
        *[!a-zA-Z0-9_]*) return 3 ;; ## * Contains other than letter/number/_.
    esac
}
isset() { #@ DESCRIPTION: Tests if variable who's name is $1 is set (i.e. not a
          #@              NULL pointer).
          #@ USAGE: isset_u [ NAME ]
    eval "[ \"\${$1+X}\" = X ]" ## Expands to X only when $1 is unset, where
                                ## comparison succeeds. Otherwise, fail.
}
setvar() { #@ DESCRIPTION: Sets $1 variable specified by reference, to $2 value.
           #@ $1 MUST BE A VALID NAME!
           #@ USAGE: setvar NAME [ VALUE ]
           #@        /!\ - WARNING! - /!\ $1 must be a valid name
    eval "$1=\${2+\"\$2\"}" ## Without the right side backslash, escaped chars
                            ## won't be part of assignment
}
getvar() { #@ DESCRIPTION: Stores value of $2 referenced var in $1 name. If $2
           #@              referenced var. is unset, so $1 name will remain and
           #@              exit status will be 1.
           #@ USAGE: getvar NAMEW NAMER
           #@        /!\ - WARNING! - /!\ $1 AND $2 must be a valid names
    eval "[ \"\${$2+X}\" = X ] && $1=\"\${$2}\"" ## Do not set $1 referenced
                                                 ## name if $2 is also unset
}
ingvar() { #@ DESCRIPTION: Stores the value of variable indirectly referenced
           #@              by name $2 in $1 (i.e. $2 name stored value). If $2
           #@              name is unset or contained name is also unset so $1
           #@              will remain and also will exit with 1 status.
           #@ USAGE: ingvar NAMEW NAMER    
    getvar $1 $2 || return 1
    eval "vname \"\$$1\"" || return 2
    eval "getvar $1 \$$2" || return 3
}
fi
