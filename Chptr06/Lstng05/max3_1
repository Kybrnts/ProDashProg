#!/bin/sh
#: Title       : Max3_1
#: Date        : 2016-05-17
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.0.0
#: Description : Executable Dash shell script
#:             : Sort three integers and write results in variables
#: Options     : N/A
##
## -- Externals required for execution -----------------------------------------
type awk >/dev/null || exit 1   ## Pattern scanning and processing language
type date >/dev/null || exit 1  ## Get system's time
type sleep >/dev/null || exit 1 ## Delay execution for some time
##
## -- Functions ----------------------------------------------------------------
setvar() { #@ DESCRIPTION: Sets $1 variable specified by reference, to $2 value.
           #@ $1 MUST BE A VALID NAME!
           #@ USAGE: setvar NAME [ VALUE ]
           #@        /!\ - WARNING! - /!\ $1 must be a valid name
    eval "$1=\${2+\"\$2\"}" ## Without the right side backslash, escaped chars
                            ## won't be part of assignment
}
_RSEED=1 ## Global seed number
_RSEQI=0 ## Global random sequence number index
srand() { #@ DESCRIPTION: Initialize the global seed number using an integer
          #@ USAGE: srand [ SEED ]
    _RSEED=${1:-"$(date +%Y%m%d%H%M%S)"} ## Use current date/time by default
    _RSEQI=0                             ## Reset sequence index
}
rand() { #@ DESCRIPTION: Prints a number in the range $2 to $1 using a random
         #@              number of an already initialized sequence of randoms. 
         #@              Sequence number index starts in 0, so rand() uses
         #@              sequence's first number on its first call. Global
         #@              sequence index is increased upon each call so rand()
         #@              uses a different random of the sequence each time. Use
         #@              srand() to initialize the random sequence.
         #@              $1 is meant to be within 0 to its default of 32767, and
         #@              min in the range of 0 to $1, using 0 by default.
         #@ USAGE: rand NAME [ MAX [ MIN ] ]
         #@        /!\ - WARNING! - /!\ $1 must be a valid name
    setvar $1 $(awk '
BEGIN{
    max='${2:-32767}'; min='${3:-0}'
    srand('${_RSEED:-1}');                   ## Initialize awks random seq
    for(i = 0; i < '$_RSEQI'; i++)           ## Skip already used randoms
        rand();
    print int(min + rand()*(max - min + 1)); ## Transform random before print
}')                        ## Generate number in subshell using awk
    _RSEQI=$((_RSEQI + 1)) ## Global index must be increased outside subshell
}
sort3() { #@ DESCRIPTION: Sorts three integers using shell's test command and
          #@              store in $1, $2 and $3 referenced names.
          #@ USAGE: sort3 MINNAME MIDNAME MAXNAME INT1 INT2 INT3
    [ $4 -gt $5 ] && set -- $1 $2 $3 $5 $4 $6 ## Last three args are swaped
    [ $5 -gt $6 ] && set -- $1 $2 $3 $4 $6 $5 ## subsequently to sort them
    [ $4 -gt $5 ] && set -- $1 $2 $3 $5 $4 $6 ## increasingly. 
    setvar $1 $4; setvar $2 $5; setvar $3 $6  ## Write sorted values to
}                                             ## referenced variables.
dsplySrtd() { #@DESCRIPTION: Displays 3 already sorted integers
              #@USAGE:
    # Local variables ("local" must be function's first statement)
    local digits format
    digits=5 format="%5s: %${digits}s\n"
    printf "$format" Min $1 Mid $2 Max $3
}
##
## -- Main ---------------------------------------------------------------------
main() {
    # Local variables ("local" must be function's first statement)
    local rand1 rand2 rand3 max mid min    
    srand                                  ## Initialize global random seed
    # Generate 3 random numbers
    printf "Generating 3 random numbers.."
    sleep 1
    rand rand1; rand rand2; rand rand3
    printf "OK\n"
    # Sort generated numbers
    printf "Sorting generated numbers.."
    sort3 min mid max $rand1 $rand2 $rand3
    sleep 1
    # Display results
    printf "OK\nSort results:\n"
    dsplySrtd $min $mid $max
}
##
## -- Run! ---------------------------------------------------------------------
main ## Call the main funciton
##
